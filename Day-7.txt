WINDOW FUNCTION------------------------------>

it applies aggregate,ranking and analytic functions over a particular window, window means a set of rows.
and OVER clause is used window functions to define window.

Synatx->
	SELECT column_name,
			fun()OVER( [<PARTITION BY clause>]
						[<ORDER BY clause>]
						[ROW or RANGE clause>] )
	FROM table_name
	
	Here fun() means->
	i)Aggregate functions
	ii)Ranking functions
	iii)Analytic functions
	
	OVER means the windws->
	i)PARTITION BY
	ii)ORDER BY
	iii)ROWS
	
	
EXPRESSION-> 	
			It's the name of the column that we want the window function to be operated.
			
OVER->
	It's used to just signify that this is a window function
	
PARTITION BY divides the rows into partitions so that we can specify which rows to use to comput the window function.
mane j rows gulor opor amra operation perform korte chai6i take partitioned kore dey.

ORDER BY data k sort korar jnno use kora hy.

ROWS use kora hoy partition korar poreo jodi amra rows gulo k limited korte chai then.Thi is generally not used.

Types of window function--------------------------->
i)Aggregate->
	SUM, AVG, COUNT, MIN, MAX
	
ii)Ranking->
	ROW_NUMBER, RANK, DENSE_RANK, PERCENT_RANK
	
iii)Vaalue/Analytic->
	LEAD, LAG, FIRST_VALUE, LAST_VALUE
 

SELECT new_id, new_cat,
SUM(new_id) OVER( PARTITION BY new_cat ORDER BY new_id ) AS "Total",//it will create a Total column which has total id of the same named candidate and it means the alphabetic order as written in code that ORDER BY new_id
AVG(new_id) OVER( PARTITION BY new_cat ORDER BY new_id ) AS "Average",//it will create a Average column which has average of the same named candidate
COUNT(new_id) OVER( PARTITION BY new_cat ORDER BY new_id ) AS "Count",//it will create a Count column which counts the same named candidate
MIN(new_id) OVER( PARTITION BY new_cat ORDER BY new_id ) AS "Min",
MAX(new_id) OVER( PARTITION BY new_cat ORDER BY new_id ) AS "Max"
FROM test_data;



SELECT new_id, new_cat,
SUM(new_id) OVER( ORDER BY new_id ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "Total",
AVG(new_id) OVER ORDER BY new_id ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "Average",
COUNT(new_id) OVER( ORDER BY new_id ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "Count",
MIN(new_id) OVER( ORDER BY new_id ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "Min",
MAX(new_id) OVER( ORDER BY new_id ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "Max*
FROM test data;


partition by korar fole jader new_cat ame 6ilo tader jonno different sum,avg,max,min bero66ilo
But rows between unbounded proceding and unbounded following korar fole all candidate r modhye sum,avg,max,min bero66e

SELECT new_id,
ROW_NUMBER() OVER( ORDER BY new_id) AS "ROW_NUMBER",//no of rows return kore 
RANK() OVER( ORDER BY new_id) AS "RANK",//first unique id r rank according to row_number then 2nd unique id r rank according to row_number and so on
DENSE_RANK() OVER( ORDER BY new _id) AS "DENSE_RANK",//first unique id r rank 1 then 2nd unique id r rank 2 and so on
PERCENT_RANK() OVER( ORDER BY new_id) AS "PERCENT_RANK"//dense_rank r percentage
FROM test data

new_id->row_number->rank->dense_rank->percent_rank
100->1->1->1->0
200->2->2->2->0.166
200->3->2->2->0.166
300->4->4->3->0.5
500->5->5->4->0.666
500->6->5->4->0.666
700->7->7->5->1


SELECT new_id,
FIRST_VALUE(new_id) OVER(ORDER BY new_id) AS "FIRST_VALUE",
LAST_VALUE(new_id) OVER(ORDER BY new_id) AS "LAST_VALUE",
LEAD(new_id) OVER( ORDER BY new_id) AS "LEAD",
LAG(new_id) OVER( ORDER BY new_id) AS "LAG"
FROM test_data;

first_value returns till minimum new_id
last_value returns till maximum new_id
lead returns more than or equal to last_value
lag returns less than or equal to first_value